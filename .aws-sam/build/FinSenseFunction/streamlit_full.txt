     1	import re
     2	from typing import Dict, Any, List, Optional
     3	import requests
     4	import streamlit as st
     5	import matplotlib.pyplot as plt
     6	
     7	
     8	# =========================
     9	# Helper Functions
    10	# =========================
    11	
    12	def parse_overrides(text: str) -> dict:
    13	    """
    14	    Extract age, risk, horizon, amount(£), and % intent from free text.
    15	    Examples: "55 years old", "high risk", "invest £3000", "save 10%", etc.
    16	    """
    17	    import re
    18	    text_l = (text or "").lower()
    19	    out: Dict[str, Any] = {}
    20	
    21	    # Age
    22	    m_age = re.search(r'(?:^|\D)(1[6-9]|[2-9]\d|100)\s*year(?:s)?\s*old\b', text_l)
    23	    if m_age:
    24	        out["age"] = int(m_age.group(1))
    25	
    26	    # Risk
    27	    if re.search(r'\b(high\s*risk|aggressive|growthy|risk[-\s]*seeking)\b', text_l):
    28	        out["risk"] = "aggressive"
    29	    elif re.search(r'\b(moderate|balanced)\b', text_l):
    30	        out["risk"] = "moderate"
    31	    elif re.search(r'\b(low\s*risk|conservative|defensive|safe)\b', text_l):
    32	        out["risk"] = "conservative"
    33	
    34	    # Horizon
    35	    m_h = re.search(r'\b(1|[2-3]?\d)\s*(?:y|yr|yrs|year|years)\b', text_l)
    36	    if m_h:
    37	        out["horizon_years"] = int(m_h.group(1))
    38	
    39	    # Amount
    40	    text_norm = text_l.replace(",", "")
    41	    m_amt = (
    42	        re.search(r'£\s*([0-9]+(?:\.[0-9]{1,2})?)', text_norm)
    43	        or re.search(r'([0-9]+(?:\.[0-9]{1,2})?)\s*(pounds|gbp)\b', text_norm)
    44	        or re.search(r'\binvest\s+([0-9]+(?:\.[0-9]{1,2})?)\b', text_norm)
    45	    )
    46	    if m_amt:
    47	        try:
    48	            out["amount_gbp"] = float(m_amt.group(1))
    49	        except Exception:
    50	            pass
    51	
    52	    # Percent
    53	    m_pct = re.search(r'(\d{1,2}(?:\.\d+)?)\s*%', text_norm) or re.search(r'(\d{1,2}(?:\.\d+)?)\s*percent', text_norm)
    54	    if m_pct:
    55	        try:
    56	            out["percent_intent"] = float(m_pct.group(1))
    57	        except Exception:
    58	            pass
    59	
    60	    return out
    61	
    62	
    63	def call_api(message: str) -> Dict[str, Any]:
    64	    payload: Dict[str, Any] = {"message": message.strip(), "force_high_vol": bool(force_high_vol)}
    65	
    66	    # Always include a profile to avoid KeyError
    67	    payload["profile"] = {
    68	        "age": int(st.session_state.get("age_sb", 25)),
    69	        "risk": st.session_state.get("risk_sb", "moderate"),
    70	        "horizon_years": int(st.session_state.get("horizon_sb", 5)),
    71	    }
    72	
    73	    overrides = parse_overrides(message)
    74	
    75	    # Apply overrides to payload only
    76	    for key in ("age", "risk", "horizon_years"):
    77	        if key in overrides:
    78	            payload["profile"][key] = overrides[key]
    79	            st.session_state[f"parsed_{key}"] = overrides[key]
    80	
    81	    # Optional chat intents
    82	    st.session_state["amount_gbp_override"] = overrides.get("amount_gbp")
    83	    st.session_state["percent_intent"] = overrides.get("percent_intent")
    84	
    85	    if demo_seed.strip():
    86	        try:
    87	            payload["demo_seed"] = int(demo_seed.strip())
    88	        except ValueError:
    89	            pass
    90	
    91	    r = requests.post(f"{api_base.rstrip('/')}/chat", json=payload, timeout=12)
    92	    r.raise_for_status()
    93	    return payload, r.json()
    94	
    95	
    96	
    97	st.set_page_config(
    98	
    99	def parse_overrides(text: str) -> dict:
   100	    """
   101	    Extract age, risk, horizon, amount(£), and % intent from free text.
   102	    Examples:
   103	      "55 years old", "high/aggressive", "low/conservative/safe/defensive",
   104	      "14 years" / "7y", "£3,000.25", "3000 pounds", "invest 35401", "save 10%".
   105	    """
   106	    text_l = (text or "").lower()
   107	    out: Dict[str, Any] = {}
   108	
   109	    # Age
   110	    m_age = re.search(r'(?:^|\D)(1[6-9]|[2-9]\d|100)\s*year(?:s)?\s*old\b', text_l)
   111	    if m_age:
   112	        out["age"] = int(m_age.group(1))
   113	
   114	    # Risk
   115	    if re.search(r'\b(high\s*risk|aggressive|growthy|risk[-\s]*seeking)\b', text_l):
   116	        out["risk"] = "aggressive"
   117	    elif re.search(r'\b(moderate|balanced)\b', text_l):
   118	        out["risk"] = "moderate"
   119	    elif re.search(r'\b(low\s*risk|conservative|defensive|safe)\b', text_l):
   120	        out["risk"] = "conservative"
   121	
   122	    # Horizon
   123	    m_h = re.search(r'\b(1|[2-3]?\d)\s*(?:y|yr|yrs|year|years)\b', text_l)
   124	    if m_h:
   125	        out["horizon_years"] = int(m_h.group(1))
   126	
   127	    # Amount (GBP)
   128	    text_norm = text_l.replace(",", "")
   129	    m_amt = (
   130	        re.search(r'£\s*([0-9]+(?:\.[0-9]{1,2})?)', text_norm)
   131	        or re.search(r'([0-9]+(?:\.[0-9]{1,2})?)\s*(pounds|gbp)\b', text_norm)
   132	        or re.search(r'\binvest\s+([0-9]+(?:\.[0-9]{1,2})?)\b', text_norm)
   133	    )
   134	    if m_amt:
   135	        try:
   136	            out["amount_gbp"] = float(m_amt.group(1))
   137	        except Exception:
   138	            pass
   139	
   140	    # Percent intent (save/invest N%)
   141	    m_pct = re.search(r'(\d{1,2}(?:\.\d+)?)\s*%', text_norm) or re.search(r'(\d{1,2}(?:\.\d+)?)\s*percent', text_norm)
   142	    if m_pct:
   143	        try:
   144	            out["percent_intent"] = float(m_pct.group(1))
   145	        except Exception:
   146	            pass
   147	
   148	    return out
